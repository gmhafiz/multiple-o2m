// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/bug/ent/multiplemany"
	"entgo.io/bug/ent/predicate"
	"entgo.io/bug/ent/user"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MultipleManyQuery is the builder for querying MultipleMany entities.
type MultipleManyQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.MultipleMany
	// eager-loading edges.
	withUser1 *UserQuery
	withUser2 *UserQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MultipleManyQuery builder.
func (mmq *MultipleManyQuery) Where(ps ...predicate.MultipleMany) *MultipleManyQuery {
	mmq.predicates = append(mmq.predicates, ps...)
	return mmq
}

// Limit adds a limit step to the query.
func (mmq *MultipleManyQuery) Limit(limit int) *MultipleManyQuery {
	mmq.limit = &limit
	return mmq
}

// Offset adds an offset step to the query.
func (mmq *MultipleManyQuery) Offset(offset int) *MultipleManyQuery {
	mmq.offset = &offset
	return mmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mmq *MultipleManyQuery) Unique(unique bool) *MultipleManyQuery {
	mmq.unique = &unique
	return mmq
}

// Order adds an order step to the query.
func (mmq *MultipleManyQuery) Order(o ...OrderFunc) *MultipleManyQuery {
	mmq.order = append(mmq.order, o...)
	return mmq
}

// QueryUser1 chains the current query on the "user1" edge.
func (mmq *MultipleManyQuery) QueryUser1() *UserQuery {
	query := &UserQuery{config: mmq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(multiplemany.Table, multiplemany.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, multiplemany.User1Table, multiplemany.User1Column),
		)
		fromU = sqlgraph.SetNeighbors(mmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUser2 chains the current query on the "user2" edge.
func (mmq *MultipleManyQuery) QueryUser2() *UserQuery {
	query := &UserQuery{config: mmq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(multiplemany.Table, multiplemany.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, multiplemany.User2Table, multiplemany.User2Column),
		)
		fromU = sqlgraph.SetNeighbors(mmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first MultipleMany entity from the query.
// Returns a *NotFoundError when no MultipleMany was found.
func (mmq *MultipleManyQuery) First(ctx context.Context) (*MultipleMany, error) {
	nodes, err := mmq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{multiplemany.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mmq *MultipleManyQuery) FirstX(ctx context.Context) *MultipleMany {
	node, err := mmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first MultipleMany ID from the query.
// Returns a *NotFoundError when no MultipleMany ID was found.
func (mmq *MultipleManyQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mmq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{multiplemany.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mmq *MultipleManyQuery) FirstIDX(ctx context.Context) int {
	id, err := mmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single MultipleMany entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one MultipleMany entity is found.
// Returns a *NotFoundError when no MultipleMany entities are found.
func (mmq *MultipleManyQuery) Only(ctx context.Context) (*MultipleMany, error) {
	nodes, err := mmq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{multiplemany.Label}
	default:
		return nil, &NotSingularError{multiplemany.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mmq *MultipleManyQuery) OnlyX(ctx context.Context) *MultipleMany {
	node, err := mmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only MultipleMany ID in the query.
// Returns a *NotSingularError when more than one MultipleMany ID is found.
// Returns a *NotFoundError when no entities are found.
func (mmq *MultipleManyQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mmq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{multiplemany.Label}
	default:
		err = &NotSingularError{multiplemany.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mmq *MultipleManyQuery) OnlyIDX(ctx context.Context) int {
	id, err := mmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MultipleManies.
func (mmq *MultipleManyQuery) All(ctx context.Context) ([]*MultipleMany, error) {
	if err := mmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return mmq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (mmq *MultipleManyQuery) AllX(ctx context.Context) []*MultipleMany {
	nodes, err := mmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of MultipleMany IDs.
func (mmq *MultipleManyQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := mmq.Select(multiplemany.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mmq *MultipleManyQuery) IDsX(ctx context.Context) []int {
	ids, err := mmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mmq *MultipleManyQuery) Count(ctx context.Context) (int, error) {
	if err := mmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return mmq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (mmq *MultipleManyQuery) CountX(ctx context.Context) int {
	count, err := mmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mmq *MultipleManyQuery) Exist(ctx context.Context) (bool, error) {
	if err := mmq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return mmq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (mmq *MultipleManyQuery) ExistX(ctx context.Context) bool {
	exist, err := mmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MultipleManyQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mmq *MultipleManyQuery) Clone() *MultipleManyQuery {
	if mmq == nil {
		return nil
	}
	return &MultipleManyQuery{
		config:     mmq.config,
		limit:      mmq.limit,
		offset:     mmq.offset,
		order:      append([]OrderFunc{}, mmq.order...),
		predicates: append([]predicate.MultipleMany{}, mmq.predicates...),
		withUser1:  mmq.withUser1.Clone(),
		withUser2:  mmq.withUser2.Clone(),
		// clone intermediate query.
		sql:    mmq.sql.Clone(),
		path:   mmq.path,
		unique: mmq.unique,
	}
}

// WithUser1 tells the query-builder to eager-load the nodes that are connected to
// the "user1" edge. The optional arguments are used to configure the query builder of the edge.
func (mmq *MultipleManyQuery) WithUser1(opts ...func(*UserQuery)) *MultipleManyQuery {
	query := &UserQuery{config: mmq.config}
	for _, opt := range opts {
		opt(query)
	}
	mmq.withUser1 = query
	return mmq
}

// WithUser2 tells the query-builder to eager-load the nodes that are connected to
// the "user2" edge. The optional arguments are used to configure the query builder of the edge.
func (mmq *MultipleManyQuery) WithUser2(opts ...func(*UserQuery)) *MultipleManyQuery {
	query := &UserQuery{config: mmq.config}
	for _, opt := range opts {
		opt(query)
	}
	mmq.withUser2 = query
	return mmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		User1 int `json:"user_1,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MultipleMany.Query().
//		GroupBy(multiplemany.FieldUser1).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (mmq *MultipleManyQuery) GroupBy(field string, fields ...string) *MultipleManyGroupBy {
	group := &MultipleManyGroupBy{config: mmq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := mmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return mmq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		User1 int `json:"user_1,omitempty"`
//	}
//
//	client.MultipleMany.Query().
//		Select(multiplemany.FieldUser1).
//		Scan(ctx, &v)
//
func (mmq *MultipleManyQuery) Select(fields ...string) *MultipleManySelect {
	mmq.fields = append(mmq.fields, fields...)
	return &MultipleManySelect{MultipleManyQuery: mmq}
}

func (mmq *MultipleManyQuery) prepareQuery(ctx context.Context) error {
	for _, f := range mmq.fields {
		if !multiplemany.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mmq.path != nil {
		prev, err := mmq.path(ctx)
		if err != nil {
			return err
		}
		mmq.sql = prev
	}
	return nil
}

func (mmq *MultipleManyQuery) sqlAll(ctx context.Context) ([]*MultipleMany, error) {
	var (
		nodes       = []*MultipleMany{}
		_spec       = mmq.querySpec()
		loadedTypes = [2]bool{
			mmq.withUser1 != nil,
			mmq.withUser2 != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &MultipleMany{config: mmq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, mmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := mmq.withUser1; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*MultipleMany)
		for i := range nodes {
			fk := nodes[i].User1
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_1" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.User1 = n
			}
		}
	}

	if query := mmq.withUser2; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*MultipleMany)
		for i := range nodes {
			fk := nodes[i].User2
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_2" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.User2 = n
			}
		}
	}

	return nodes, nil
}

func (mmq *MultipleManyQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mmq.querySpec()
	_spec.Node.Columns = mmq.fields
	if len(mmq.fields) > 0 {
		_spec.Unique = mmq.unique != nil && *mmq.unique
	}
	return sqlgraph.CountNodes(ctx, mmq.driver, _spec)
}

func (mmq *MultipleManyQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := mmq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (mmq *MultipleManyQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   multiplemany.Table,
			Columns: multiplemany.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: multiplemany.FieldID,
			},
		},
		From:   mmq.sql,
		Unique: true,
	}
	if unique := mmq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := mmq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, multiplemany.FieldID)
		for i := range fields {
			if fields[i] != multiplemany.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := mmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mmq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mmq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mmq *MultipleManyQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mmq.driver.Dialect())
	t1 := builder.Table(multiplemany.Table)
	columns := mmq.fields
	if len(columns) == 0 {
		columns = multiplemany.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mmq.sql != nil {
		selector = mmq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mmq.unique != nil && *mmq.unique {
		selector.Distinct()
	}
	for _, p := range mmq.predicates {
		p(selector)
	}
	for _, p := range mmq.order {
		p(selector)
	}
	if offset := mmq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mmq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MultipleManyGroupBy is the group-by builder for MultipleMany entities.
type MultipleManyGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mmgb *MultipleManyGroupBy) Aggregate(fns ...AggregateFunc) *MultipleManyGroupBy {
	mmgb.fns = append(mmgb.fns, fns...)
	return mmgb
}

// Scan applies the group-by query and scans the result into the given value.
func (mmgb *MultipleManyGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := mmgb.path(ctx)
	if err != nil {
		return err
	}
	mmgb.sql = query
	return mmgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (mmgb *MultipleManyGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := mmgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (mmgb *MultipleManyGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(mmgb.fields) > 1 {
		return nil, errors.New("ent: MultipleManyGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := mmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (mmgb *MultipleManyGroupBy) StringsX(ctx context.Context) []string {
	v, err := mmgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mmgb *MultipleManyGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = mmgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{multiplemany.Label}
	default:
		err = fmt.Errorf("ent: MultipleManyGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (mmgb *MultipleManyGroupBy) StringX(ctx context.Context) string {
	v, err := mmgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (mmgb *MultipleManyGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(mmgb.fields) > 1 {
		return nil, errors.New("ent: MultipleManyGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := mmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (mmgb *MultipleManyGroupBy) IntsX(ctx context.Context) []int {
	v, err := mmgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mmgb *MultipleManyGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = mmgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{multiplemany.Label}
	default:
		err = fmt.Errorf("ent: MultipleManyGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (mmgb *MultipleManyGroupBy) IntX(ctx context.Context) int {
	v, err := mmgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (mmgb *MultipleManyGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(mmgb.fields) > 1 {
		return nil, errors.New("ent: MultipleManyGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := mmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (mmgb *MultipleManyGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := mmgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mmgb *MultipleManyGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = mmgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{multiplemany.Label}
	default:
		err = fmt.Errorf("ent: MultipleManyGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (mmgb *MultipleManyGroupBy) Float64X(ctx context.Context) float64 {
	v, err := mmgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (mmgb *MultipleManyGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(mmgb.fields) > 1 {
		return nil, errors.New("ent: MultipleManyGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := mmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (mmgb *MultipleManyGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := mmgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (mmgb *MultipleManyGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = mmgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{multiplemany.Label}
	default:
		err = fmt.Errorf("ent: MultipleManyGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (mmgb *MultipleManyGroupBy) BoolX(ctx context.Context) bool {
	v, err := mmgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mmgb *MultipleManyGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range mmgb.fields {
		if !multiplemany.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := mmgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mmgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (mmgb *MultipleManyGroupBy) sqlQuery() *sql.Selector {
	selector := mmgb.sql.Select()
	aggregation := make([]string, 0, len(mmgb.fns))
	for _, fn := range mmgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(mmgb.fields)+len(mmgb.fns))
		for _, f := range mmgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(mmgb.fields...)...)
}

// MultipleManySelect is the builder for selecting fields of MultipleMany entities.
type MultipleManySelect struct {
	*MultipleManyQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (mms *MultipleManySelect) Scan(ctx context.Context, v interface{}) error {
	if err := mms.prepareQuery(ctx); err != nil {
		return err
	}
	mms.sql = mms.MultipleManyQuery.sqlQuery(ctx)
	return mms.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (mms *MultipleManySelect) ScanX(ctx context.Context, v interface{}) {
	if err := mms.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (mms *MultipleManySelect) Strings(ctx context.Context) ([]string, error) {
	if len(mms.fields) > 1 {
		return nil, errors.New("ent: MultipleManySelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := mms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (mms *MultipleManySelect) StringsX(ctx context.Context) []string {
	v, err := mms.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (mms *MultipleManySelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = mms.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{multiplemany.Label}
	default:
		err = fmt.Errorf("ent: MultipleManySelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (mms *MultipleManySelect) StringX(ctx context.Context) string {
	v, err := mms.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (mms *MultipleManySelect) Ints(ctx context.Context) ([]int, error) {
	if len(mms.fields) > 1 {
		return nil, errors.New("ent: MultipleManySelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := mms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (mms *MultipleManySelect) IntsX(ctx context.Context) []int {
	v, err := mms.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (mms *MultipleManySelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = mms.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{multiplemany.Label}
	default:
		err = fmt.Errorf("ent: MultipleManySelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (mms *MultipleManySelect) IntX(ctx context.Context) int {
	v, err := mms.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (mms *MultipleManySelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(mms.fields) > 1 {
		return nil, errors.New("ent: MultipleManySelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := mms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (mms *MultipleManySelect) Float64sX(ctx context.Context) []float64 {
	v, err := mms.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (mms *MultipleManySelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = mms.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{multiplemany.Label}
	default:
		err = fmt.Errorf("ent: MultipleManySelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (mms *MultipleManySelect) Float64X(ctx context.Context) float64 {
	v, err := mms.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (mms *MultipleManySelect) Bools(ctx context.Context) ([]bool, error) {
	if len(mms.fields) > 1 {
		return nil, errors.New("ent: MultipleManySelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := mms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (mms *MultipleManySelect) BoolsX(ctx context.Context) []bool {
	v, err := mms.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (mms *MultipleManySelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = mms.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{multiplemany.Label}
	default:
		err = fmt.Errorf("ent: MultipleManySelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (mms *MultipleManySelect) BoolX(ctx context.Context) bool {
	v, err := mms.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mms *MultipleManySelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := mms.sql.Query()
	if err := mms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
