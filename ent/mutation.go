// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/bug/ent/multiplemany"
	"entgo.io/bug/ent/predicate"
	"entgo.io/bug/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMultipleMany = "MultipleMany"
	TypeUser         = "User"
)

// MultipleManyMutation represents an operation that mutates the MultipleMany nodes in the graph.
type MultipleManyMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	user1         *int
	cleareduser1  bool
	user2         *int
	cleareduser2  bool
	done          bool
	oldValue      func(context.Context) (*MultipleMany, error)
	predicates    []predicate.MultipleMany
}

var _ ent.Mutation = (*MultipleManyMutation)(nil)

// multiplemanyOption allows management of the mutation configuration using functional options.
type multiplemanyOption func(*MultipleManyMutation)

// newMultipleManyMutation creates new mutation for the MultipleMany entity.
func newMultipleManyMutation(c config, op Op, opts ...multiplemanyOption) *MultipleManyMutation {
	m := &MultipleManyMutation{
		config:        c,
		op:            op,
		typ:           TypeMultipleMany,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMultipleManyID sets the ID field of the mutation.
func withMultipleManyID(id int) multiplemanyOption {
	return func(m *MultipleManyMutation) {
		var (
			err   error
			once  sync.Once
			value *MultipleMany
		)
		m.oldValue = func(ctx context.Context) (*MultipleMany, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().MultipleMany.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMultipleMany sets the old MultipleMany of the mutation.
func withMultipleMany(node *MultipleMany) multiplemanyOption {
	return func(m *MultipleManyMutation) {
		m.oldValue = func(context.Context) (*MultipleMany, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MultipleManyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MultipleManyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MultipleManyMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MultipleManyMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().MultipleMany.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUser1 sets the "user_1" field.
func (m *MultipleManyMutation) SetUser1(i int) {
	m.user1 = &i
}

// User1 returns the value of the "user_1" field in the mutation.
func (m *MultipleManyMutation) User1() (r int, exists bool) {
	v := m.user1
	if v == nil {
		return
	}
	return *v, true
}

// OldUser1 returns the old "user_1" field's value of the MultipleMany entity.
// If the MultipleMany object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MultipleManyMutation) OldUser1(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUser1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUser1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUser1: %w", err)
	}
	return oldValue.User1, nil
}

// ResetUser1 resets all changes to the "user_1" field.
func (m *MultipleManyMutation) ResetUser1() {
	m.user1 = nil
}

// SetUser2 sets the "user_2" field.
func (m *MultipleManyMutation) SetUser2(i int) {
	m.user2 = &i
}

// User2 returns the value of the "user_2" field in the mutation.
func (m *MultipleManyMutation) User2() (r int, exists bool) {
	v := m.user2
	if v == nil {
		return
	}
	return *v, true
}

// OldUser2 returns the old "user_2" field's value of the MultipleMany entity.
// If the MultipleMany object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MultipleManyMutation) OldUser2(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUser2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUser2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUser2: %w", err)
	}
	return oldValue.User2, nil
}

// ResetUser2 resets all changes to the "user_2" field.
func (m *MultipleManyMutation) ResetUser2() {
	m.user2 = nil
}

// SetUser1ID sets the "user1" edge to the User entity by id.
func (m *MultipleManyMutation) SetUser1ID(id int) {
	m.user1 = &id
}

// ClearUser1 clears the "user1" edge to the User entity.
func (m *MultipleManyMutation) ClearUser1() {
	m.cleareduser1 = true
}

// User1Cleared reports if the "user1" edge to the User entity was cleared.
func (m *MultipleManyMutation) User1Cleared() bool {
	return m.cleareduser1
}

// User1ID returns the "user1" edge ID in the mutation.
func (m *MultipleManyMutation) User1ID() (id int, exists bool) {
	if m.user1 != nil {
		return *m.user1, true
	}
	return
}

// User1IDs returns the "user1" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// User1ID instead. It exists only for internal usage by the builders.
func (m *MultipleManyMutation) User1IDs() (ids []int) {
	if id := m.user1; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser1 resets all changes to the "user1" edge.
func (m *MultipleManyMutation) ResetUser1() {
	m.user1 = nil
	m.cleareduser1 = false
}

// SetUser2ID sets the "user2" edge to the User entity by id.
func (m *MultipleManyMutation) SetUser2ID(id int) {
	m.user2 = &id
}

// ClearUser2 clears the "user2" edge to the User entity.
func (m *MultipleManyMutation) ClearUser2() {
	m.cleareduser2 = true
}

// User2Cleared reports if the "user2" edge to the User entity was cleared.
func (m *MultipleManyMutation) User2Cleared() bool {
	return m.cleareduser2
}

// User2ID returns the "user2" edge ID in the mutation.
func (m *MultipleManyMutation) User2ID() (id int, exists bool) {
	if m.user2 != nil {
		return *m.user2, true
	}
	return
}

// User2IDs returns the "user2" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// User2ID instead. It exists only for internal usage by the builders.
func (m *MultipleManyMutation) User2IDs() (ids []int) {
	if id := m.user2; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser2 resets all changes to the "user2" edge.
func (m *MultipleManyMutation) ResetUser2() {
	m.user2 = nil
	m.cleareduser2 = false
}

// Where appends a list predicates to the MultipleManyMutation builder.
func (m *MultipleManyMutation) Where(ps ...predicate.MultipleMany) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *MultipleManyMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (MultipleMany).
func (m *MultipleManyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MultipleManyMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.user1 != nil {
		fields = append(fields, multiplemany.FieldUser1)
	}
	if m.user2 != nil {
		fields = append(fields, multiplemany.FieldUser2)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MultipleManyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case multiplemany.FieldUser1:
		return m.User1()
	case multiplemany.FieldUser2:
		return m.User2()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MultipleManyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case multiplemany.FieldUser1:
		return m.OldUser1(ctx)
	case multiplemany.FieldUser2:
		return m.OldUser2(ctx)
	}
	return nil, fmt.Errorf("unknown MultipleMany field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MultipleManyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case multiplemany.FieldUser1:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUser1(v)
		return nil
	case multiplemany.FieldUser2:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUser2(v)
		return nil
	}
	return fmt.Errorf("unknown MultipleMany field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MultipleManyMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MultipleManyMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MultipleManyMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MultipleMany numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MultipleManyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MultipleManyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MultipleManyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MultipleMany nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MultipleManyMutation) ResetField(name string) error {
	switch name {
	case multiplemany.FieldUser1:
		m.ResetUser1()
		return nil
	case multiplemany.FieldUser2:
		m.ResetUser2()
		return nil
	}
	return fmt.Errorf("unknown MultipleMany field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MultipleManyMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user1 != nil {
		edges = append(edges, multiplemany.EdgeUser1)
	}
	if m.user2 != nil {
		edges = append(edges, multiplemany.EdgeUser2)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MultipleManyMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case multiplemany.EdgeUser1:
		if id := m.user1; id != nil {
			return []ent.Value{*id}
		}
	case multiplemany.EdgeUser2:
		if id := m.user2; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MultipleManyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MultipleManyMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MultipleManyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser1 {
		edges = append(edges, multiplemany.EdgeUser1)
	}
	if m.cleareduser2 {
		edges = append(edges, multiplemany.EdgeUser2)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MultipleManyMutation) EdgeCleared(name string) bool {
	switch name {
	case multiplemany.EdgeUser1:
		return m.cleareduser1
	case multiplemany.EdgeUser2:
		return m.cleareduser2
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MultipleManyMutation) ClearEdge(name string) error {
	switch name {
	case multiplemany.EdgeUser1:
		m.ClearUser1()
		return nil
	case multiplemany.EdgeUser2:
		m.ClearUser2()
		return nil
	}
	return fmt.Errorf("unknown MultipleMany unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MultipleManyMutation) ResetEdge(name string) error {
	switch name {
	case multiplemany.EdgeUser1:
		m.ResetUser1()
		return nil
	case multiplemany.EdgeUser2:
		m.ResetUser2()
		return nil
	}
	return fmt.Errorf("unknown MultipleMany edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	clearedFields          map[string]struct{}
	multiple_many_1        map[int]struct{}
	removedmultiple_many_1 map[int]struct{}
	clearedmultiple_many_1 bool
	multiple_many_2        map[int]struct{}
	removedmultiple_many_2 map[int]struct{}
	clearedmultiple_many_2 bool
	done                   bool
	oldValue               func(context.Context) (*User, error)
	predicates             []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// AddMultipleMany1IDs adds the "multiple_many_1" edge to the MultipleMany entity by ids.
func (m *UserMutation) AddMultipleMany1IDs(ids ...int) {
	if m.multiple_many_1 == nil {
		m.multiple_many_1 = make(map[int]struct{})
	}
	for i := range ids {
		m.multiple_many_1[ids[i]] = struct{}{}
	}
}

// ClearMultipleMany1 clears the "multiple_many_1" edge to the MultipleMany entity.
func (m *UserMutation) ClearMultipleMany1() {
	m.clearedmultiple_many_1 = true
}

// MultipleMany1Cleared reports if the "multiple_many_1" edge to the MultipleMany entity was cleared.
func (m *UserMutation) MultipleMany1Cleared() bool {
	return m.clearedmultiple_many_1
}

// RemoveMultipleMany1IDs removes the "multiple_many_1" edge to the MultipleMany entity by IDs.
func (m *UserMutation) RemoveMultipleMany1IDs(ids ...int) {
	if m.removedmultiple_many_1 == nil {
		m.removedmultiple_many_1 = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.multiple_many_1, ids[i])
		m.removedmultiple_many_1[ids[i]] = struct{}{}
	}
}

// RemovedMultipleMany1 returns the removed IDs of the "multiple_many_1" edge to the MultipleMany entity.
func (m *UserMutation) RemovedMultipleMany1IDs() (ids []int) {
	for id := range m.removedmultiple_many_1 {
		ids = append(ids, id)
	}
	return
}

// MultipleMany1IDs returns the "multiple_many_1" edge IDs in the mutation.
func (m *UserMutation) MultipleMany1IDs() (ids []int) {
	for id := range m.multiple_many_1 {
		ids = append(ids, id)
	}
	return
}

// ResetMultipleMany1 resets all changes to the "multiple_many_1" edge.
func (m *UserMutation) ResetMultipleMany1() {
	m.multiple_many_1 = nil
	m.clearedmultiple_many_1 = false
	m.removedmultiple_many_1 = nil
}

// AddMultipleMany2IDs adds the "multiple_many_2" edge to the MultipleMany entity by ids.
func (m *UserMutation) AddMultipleMany2IDs(ids ...int) {
	if m.multiple_many_2 == nil {
		m.multiple_many_2 = make(map[int]struct{})
	}
	for i := range ids {
		m.multiple_many_2[ids[i]] = struct{}{}
	}
}

// ClearMultipleMany2 clears the "multiple_many_2" edge to the MultipleMany entity.
func (m *UserMutation) ClearMultipleMany2() {
	m.clearedmultiple_many_2 = true
}

// MultipleMany2Cleared reports if the "multiple_many_2" edge to the MultipleMany entity was cleared.
func (m *UserMutation) MultipleMany2Cleared() bool {
	return m.clearedmultiple_many_2
}

// RemoveMultipleMany2IDs removes the "multiple_many_2" edge to the MultipleMany entity by IDs.
func (m *UserMutation) RemoveMultipleMany2IDs(ids ...int) {
	if m.removedmultiple_many_2 == nil {
		m.removedmultiple_many_2 = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.multiple_many_2, ids[i])
		m.removedmultiple_many_2[ids[i]] = struct{}{}
	}
}

// RemovedMultipleMany2 returns the removed IDs of the "multiple_many_2" edge to the MultipleMany entity.
func (m *UserMutation) RemovedMultipleMany2IDs() (ids []int) {
	for id := range m.removedmultiple_many_2 {
		ids = append(ids, id)
	}
	return
}

// MultipleMany2IDs returns the "multiple_many_2" edge IDs in the mutation.
func (m *UserMutation) MultipleMany2IDs() (ids []int) {
	for id := range m.multiple_many_2 {
		ids = append(ids, id)
	}
	return
}

// ResetMultipleMany2 resets all changes to the "multiple_many_2" edge.
func (m *UserMutation) ResetMultipleMany2() {
	m.multiple_many_2 = nil
	m.clearedmultiple_many_2 = false
	m.removedmultiple_many_2 = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.multiple_many_1 != nil {
		edges = append(edges, user.EdgeMultipleMany1)
	}
	if m.multiple_many_2 != nil {
		edges = append(edges, user.EdgeMultipleMany2)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeMultipleMany1:
		ids := make([]ent.Value, 0, len(m.multiple_many_1))
		for id := range m.multiple_many_1 {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeMultipleMany2:
		ids := make([]ent.Value, 0, len(m.multiple_many_2))
		for id := range m.multiple_many_2 {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedmultiple_many_1 != nil {
		edges = append(edges, user.EdgeMultipleMany1)
	}
	if m.removedmultiple_many_2 != nil {
		edges = append(edges, user.EdgeMultipleMany2)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeMultipleMany1:
		ids := make([]ent.Value, 0, len(m.removedmultiple_many_1))
		for id := range m.removedmultiple_many_1 {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeMultipleMany2:
		ids := make([]ent.Value, 0, len(m.removedmultiple_many_2))
		for id := range m.removedmultiple_many_2 {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedmultiple_many_1 {
		edges = append(edges, user.EdgeMultipleMany1)
	}
	if m.clearedmultiple_many_2 {
		edges = append(edges, user.EdgeMultipleMany2)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeMultipleMany1:
		return m.clearedmultiple_many_1
	case user.EdgeMultipleMany2:
		return m.clearedmultiple_many_2
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeMultipleMany1:
		m.ResetMultipleMany1()
		return nil
	case user.EdgeMultipleMany2:
		m.ResetMultipleMany2()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
