// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/bug/ent/multiplemany"
	"entgo.io/bug/ent/predicate"
	"entgo.io/bug/ent/user"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MultipleManyUpdate is the builder for updating MultipleMany entities.
type MultipleManyUpdate struct {
	config
	hooks    []Hook
	mutation *MultipleManyMutation
}

// Where appends a list predicates to the MultipleManyUpdate builder.
func (mmu *MultipleManyUpdate) Where(ps ...predicate.MultipleMany) *MultipleManyUpdate {
	mmu.mutation.Where(ps...)
	return mmu
}

// SetUser1 sets the "user_1" field.
func (mmu *MultipleManyUpdate) SetUser1(i int) *MultipleManyUpdate {
	mmu.mutation.SetUser1(i)
	return mmu
}

// SetUser2 sets the "user_2" field.
func (mmu *MultipleManyUpdate) SetUser2(i int) *MultipleManyUpdate {
	mmu.mutation.SetUser2(i)
	return mmu
}

// SetUser1ID sets the "user1" edge to the User entity by ID.
func (mmu *MultipleManyUpdate) SetUser1ID(id int) *MultipleManyUpdate {
	mmu.mutation.SetUser1ID(id)
	return mmu
}

// SetUser1 sets the "user1" edge to the User entity.
func (mmu *MultipleManyUpdate) SetUser1(u *User) *MultipleManyUpdate {
	return mmu.SetUser1ID(u.ID)
}

// SetUser2ID sets the "user2" edge to the User entity by ID.
func (mmu *MultipleManyUpdate) SetUser2ID(id int) *MultipleManyUpdate {
	mmu.mutation.SetUser2ID(id)
	return mmu
}

// SetUser2 sets the "user2" edge to the User entity.
func (mmu *MultipleManyUpdate) SetUser2(u *User) *MultipleManyUpdate {
	return mmu.SetUser2ID(u.ID)
}

// Mutation returns the MultipleManyMutation object of the builder.
func (mmu *MultipleManyUpdate) Mutation() *MultipleManyMutation {
	return mmu.mutation
}

// ClearUser1 clears the "user1" edge to the User entity.
func (mmu *MultipleManyUpdate) ClearUser1() *MultipleManyUpdate {
	mmu.mutation.ClearUser1()
	return mmu
}

// ClearUser2 clears the "user2" edge to the User entity.
func (mmu *MultipleManyUpdate) ClearUser2() *MultipleManyUpdate {
	mmu.mutation.ClearUser2()
	return mmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mmu *MultipleManyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mmu.hooks) == 0 {
		if err = mmu.check(); err != nil {
			return 0, err
		}
		affected, err = mmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MultipleManyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mmu.check(); err != nil {
				return 0, err
			}
			mmu.mutation = mutation
			affected, err = mmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mmu.hooks) - 1; i >= 0; i-- {
			if mmu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mmu *MultipleManyUpdate) SaveX(ctx context.Context) int {
	affected, err := mmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mmu *MultipleManyUpdate) Exec(ctx context.Context) error {
	_, err := mmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mmu *MultipleManyUpdate) ExecX(ctx context.Context) {
	if err := mmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mmu *MultipleManyUpdate) check() error {
	if _, ok := mmu.mutation.User1ID(); mmu.mutation.User1Cleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MultipleMany.user1"`)
	}
	if _, ok := mmu.mutation.User2ID(); mmu.mutation.User2Cleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MultipleMany.user2"`)
	}
	return nil
}

func (mmu *MultipleManyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   multiplemany.Table,
			Columns: multiplemany.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: multiplemany.FieldID,
			},
		},
	}
	if ps := mmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mmu.mutation.User1Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   multiplemany.User1Table,
			Columns: []string{multiplemany.User1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mmu.mutation.User1IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   multiplemany.User1Table,
			Columns: []string{multiplemany.User1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mmu.mutation.User2Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   multiplemany.User2Table,
			Columns: []string{multiplemany.User2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mmu.mutation.User2IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   multiplemany.User2Table,
			Columns: []string{multiplemany.User2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{multiplemany.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MultipleManyUpdateOne is the builder for updating a single MultipleMany entity.
type MultipleManyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MultipleManyMutation
}

// SetUser1 sets the "user_1" field.
func (mmuo *MultipleManyUpdateOne) SetUser1(i int) *MultipleManyUpdateOne {
	mmuo.mutation.SetUser1(i)
	return mmuo
}

// SetUser2 sets the "user_2" field.
func (mmuo *MultipleManyUpdateOne) SetUser2(i int) *MultipleManyUpdateOne {
	mmuo.mutation.SetUser2(i)
	return mmuo
}

// SetUser1ID sets the "user1" edge to the User entity by ID.
func (mmuo *MultipleManyUpdateOne) SetUser1ID(id int) *MultipleManyUpdateOne {
	mmuo.mutation.SetUser1ID(id)
	return mmuo
}

// SetUser1 sets the "user1" edge to the User entity.
func (mmuo *MultipleManyUpdateOne) SetUser1(u *User) *MultipleManyUpdateOne {
	return mmuo.SetUser1ID(u.ID)
}

// SetUser2ID sets the "user2" edge to the User entity by ID.
func (mmuo *MultipleManyUpdateOne) SetUser2ID(id int) *MultipleManyUpdateOne {
	mmuo.mutation.SetUser2ID(id)
	return mmuo
}

// SetUser2 sets the "user2" edge to the User entity.
func (mmuo *MultipleManyUpdateOne) SetUser2(u *User) *MultipleManyUpdateOne {
	return mmuo.SetUser2ID(u.ID)
}

// Mutation returns the MultipleManyMutation object of the builder.
func (mmuo *MultipleManyUpdateOne) Mutation() *MultipleManyMutation {
	return mmuo.mutation
}

// ClearUser1 clears the "user1" edge to the User entity.
func (mmuo *MultipleManyUpdateOne) ClearUser1() *MultipleManyUpdateOne {
	mmuo.mutation.ClearUser1()
	return mmuo
}

// ClearUser2 clears the "user2" edge to the User entity.
func (mmuo *MultipleManyUpdateOne) ClearUser2() *MultipleManyUpdateOne {
	mmuo.mutation.ClearUser2()
	return mmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mmuo *MultipleManyUpdateOne) Select(field string, fields ...string) *MultipleManyUpdateOne {
	mmuo.fields = append([]string{field}, fields...)
	return mmuo
}

// Save executes the query and returns the updated MultipleMany entity.
func (mmuo *MultipleManyUpdateOne) Save(ctx context.Context) (*MultipleMany, error) {
	var (
		err  error
		node *MultipleMany
	)
	if len(mmuo.hooks) == 0 {
		if err = mmuo.check(); err != nil {
			return nil, err
		}
		node, err = mmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MultipleManyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mmuo.check(); err != nil {
				return nil, err
			}
			mmuo.mutation = mutation
			node, err = mmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mmuo.hooks) - 1; i >= 0; i-- {
			if mmuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mmuo *MultipleManyUpdateOne) SaveX(ctx context.Context) *MultipleMany {
	node, err := mmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mmuo *MultipleManyUpdateOne) Exec(ctx context.Context) error {
	_, err := mmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mmuo *MultipleManyUpdateOne) ExecX(ctx context.Context) {
	if err := mmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mmuo *MultipleManyUpdateOne) check() error {
	if _, ok := mmuo.mutation.User1ID(); mmuo.mutation.User1Cleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MultipleMany.user1"`)
	}
	if _, ok := mmuo.mutation.User2ID(); mmuo.mutation.User2Cleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "MultipleMany.user2"`)
	}
	return nil
}

func (mmuo *MultipleManyUpdateOne) sqlSave(ctx context.Context) (_node *MultipleMany, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   multiplemany.Table,
			Columns: multiplemany.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: multiplemany.FieldID,
			},
		},
	}
	id, ok := mmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MultipleMany.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, multiplemany.FieldID)
		for _, f := range fields {
			if !multiplemany.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != multiplemany.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mmuo.mutation.User1Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   multiplemany.User1Table,
			Columns: []string{multiplemany.User1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mmuo.mutation.User1IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   multiplemany.User1Table,
			Columns: []string{multiplemany.User1Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mmuo.mutation.User2Cleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   multiplemany.User2Table,
			Columns: []string{multiplemany.User2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mmuo.mutation.User2IDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   multiplemany.User2Table,
			Columns: []string{multiplemany.User2Column},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MultipleMany{config: mmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{multiplemany.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
